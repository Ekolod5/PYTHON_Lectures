# Функция filter
# Функция filter() применяет указанную функцию к каждому элементу 
# итерируемого объекта и возвращает итератор с теми объектами, 
# для которых функция вернула True.

data = [15, 65, 9, 36, 175]
res = list(filter(lambda x: x % 10 == 5, data))
print(res)                    # [15, 65, 175]


# Задача: В списке хранятся числа. Нужно выбрать только чётные 
# числа и составить список пар (число; квадрат числа).
# Пример: 1 2 3 5 8 15 23 38 
# Получить: [(2, 4), (8, 64), (38, 1444)]
# where = filter

data = [1, 2, 3, 5, 8, 15, 23, 38]
res = map(int, data)                                               
res = filter(lambda x: x % 2 == 0, res)                           
res = list(map(lambda x: (x, x**2), res))
print(res)                                # [(2, 4), (8, 64), (38, 1444)]


# Функция zip
# Функция zip() применяется к набору итерируемых объектов и 
# возвращает итератор с кортежами из элементов входных данных

# Пример 1:
users = ['user1', 'user2', 'user3', 'user4', 'user5']
ids = [4, 5, 9, 14, 7]
data = list(zip(users, ids))
print(data) 
# [('user1', 4), ('user2', 5), ('user3', 9), ('user4', 14), ('user5', 7)]


# Пример 2:
# Функция zip () пробегает по минимальному входящему набору:

users = ['user1', 'user2', 'user3', 'user4', 'user5']
ids = [4, 5, 9, 14, 7]
salary = [111, 222, 333]
data = list(zip(users, ids, salary))
print(data) 
# [('user1', 4, 111), ('user2', 5, 222), ('user3', 9, 333)]


# Функция enumerate
# Функция enumerate() применяется к итерируемому объекту и возвращает 
# новый итератор с кортежами из индекса и элементов входных данных.
# Функция enumerate() позволяет пронумеровать набор данных.

users = ['user1', 'user2', 'user3']
data = list(enumerate(users))
print(data) 
# [(0, 'user1'), (1, 'user2'), (2, 'user3))] кортеж
